trigger:
- develop
- master
pr:
- develop

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '10.x'

- task: UseDotNet@2
  displayName: 'Use .NET Core'
  inputs:
    packageType: sdk
    version: 3.x

- script: |
    npm ci
    npm run build
  displayName: 'Build browser extension'
  workingDirectory: BrowserExtension

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'Build bridge'
  inputs:
    command: build
    projects: 'CandidatesChecker.sln'
    arguments: -c Release --no-restore
    workingDirectory: Bridge

- task: DotNetCoreCLI@2
  displayName: 'Publish bridge'
  inputs:
    command: publish
    publishWebProjects: true
    zipAfterPublish: true
    arguments: -c Release -o $(Build.ArtifactStagingDirectory)/bridge --no-restore
    workingDirectory: Bridge
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: ArchiveFiles@2
  displayName: 'Zip bowser extension'
  inputs:
    rootFolderOrFile: BrowserExtension/dist
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/browser-extension.zip'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts: browser extension'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/browser-extension.zip'
    artifactName: browser-extension
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts: bridge'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/bridge.zip'
    artifactName: bridge
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
